package com.asm.netty.a_stickandhalf_bag_4;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufAllocator;
import io.netty.buffer.Unpooled;
import io.netty.channel.embedded.EmbeddedChannel;
import io.netty.handler.codec.DelimiterBasedFrameDecoder;
import io.netty.handler.logging.LogLevel;
import io.netty.handler.logging.LoggingHandler;
import org.junit.Test;

/**
 * 快捷键
 *
 * Ctrl + Alt + M  封装方法
 * Ctrl + Alt + p  抽成参数
 +-------------------------------------------------+
 |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |
 +--------+-------------------------------------------------+----------------+
 |00000000| 7e 00 14 00 02 30 30 32 30 32 30 32 31 31 30 30 |~....00202021100|
 |00000010| 30 30 30 36 30 cd fb 7e                         |00060..~        |
 +--------+-------------------------------------------------+----------------+
 */
public class EmbeddedChannelTest {

    public static void main(String[] args) {

        /*###############################*/
        /*###       当成 服务器端       ###*/
        /*###############################*/
        final EmbeddedChannel ch = new EmbeddedChannel(
                // 注意：解码器 放debug上面

                new DelimiterBasedFrameDecoder(1024,Unpooled.wrappedBuffer(new byte[]{0x7e})),
                new LoggingHandler(LogLevel.DEBUG)
        );

        /*###############################*/
        /*###       当成 客户端        ###*/
        /*###############################*/
        // 指定：长度字段-4字节；
        final ByteBuf buf = ByteBufAllocator.DEFAULT.buffer();

        sendBytes(buf, regByte);

        // 将消息 写入 Channel
        ch.writeInbound(buf);

    }

    private static void sendBytes(ByteBuf buf, byte[] bytes) {

        final int length = bytes.length;    // 实际内容长度

        buf.writeBytes(bytes);
    }

    /**
     * 高低位测试
     */
    @Test
    public void test1()
    {
        int num = 0x12345678;

//        "%d\n", num
    }


    // 0001 初始化
    static final byte[] initByte = {(byte)0x7e, (byte)0x00, (byte)0xca, (byte)0x00, (byte)0x01, (byte)0x30, (byte)0x30, (byte)0x32, (byte)0x30, (byte)0x32,
            (byte)0x30, (byte)0x32, (byte)0x31, (byte)0x31, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x36, (byte)0x30, (byte)0x30,
            (byte)0x34, (byte)0x2e, (byte)0x32, (byte)0x35, (byte)0x30, (byte)0x31, (byte)0x3a, (byte)0xe5, (byte)0xb7, (byte)0xa5, (byte)0xe4, (byte)0xbd,
            (byte)0x9c, (byte)0xe4, (byte)0xbd, (byte)0x8d, (byte)0xe7, (byte)0xb1, (byte)0xbb, (byte)0xe5, (byte)0x88, (byte)0xab, (byte)0x3b, (byte)0x30,
            (byte)0x32, (byte)0x3a, (byte)0xe7, (byte)0x94, (byte)0xb5, (byte)0xe6, (byte)0x9c, (byte)0xba, (byte)0xe4, (byte)0xbd, (byte)0x8d, (byte)0xe6,
            (byte)0x8e, (byte)0xa7, (byte)0xe5, (byte)0x88, (byte)0xb6, (byte)0xe7, (byte)0xb1, (byte)0xbb, (byte)0xe5, (byte)0x88, (byte)0xab, (byte)0x3b,
            (byte)0x30, (byte)0x33, (byte)0x3a, (byte)0xe9, (byte)0x97, (byte)0xb8, (byte)0xe9, (byte)0x81, (byte)0x93, (byte)0xe4, (byte)0xbd, (byte)0x8d,
            (byte)0xe6, (byte)0x8e, (byte)0xa7, (byte)0xe5, (byte)0x88, (byte)0xb6, (byte)0xe7, (byte)0xb1, (byte)0xbb, (byte)0xe5, (byte)0x88, (byte)0xab,
            (byte)0x3b, (byte)0x30, (byte)0x34, (byte)0x3a, (byte)0xe6, (byte)0x95, (byte)0xb0, (byte)0xe6, (byte)0x8d, (byte)0xae, (byte)0xe9, (byte)0x87,
            (byte)0x87, (byte)0xe9, (byte)0x9b, (byte)0x86, (byte)0x49, (byte)0x4f, (byte)0xe7, (byte)0xb1, (byte)0xbb, (byte)0xe5, (byte)0x88, (byte)0xab,
            (byte)0x3b, (byte)0x30, (byte)0x35, (byte)0x3a, (byte)0xe5, (byte)0xb7, (byte)0xa5, (byte)0xe4, (byte)0xbd, (byte)0x9c, (byte)0xe4, (byte)0xbd,
            (byte)0x8d, (byte)0xe8, (byte)0x87, (byte)0xaa, (byte)0xe6, (byte)0xa3, (byte)0x80, (byte)0xe7, (byte)0xb1, (byte)0xbb, (byte)0xe5, (byte)0x88,
            (byte)0xab, (byte)0x3b, (byte)0x30, (byte)0x36, (byte)0x3a, (byte)0xe5, (byte)0xb7, (byte)0xa5, (byte)0xe4, (byte)0xbd, (byte)0x9c, (byte)0xe4,
            (byte)0xbd, (byte)0x8d, (byte)0x42, (byte)0x79, (byte)0x70, (byte)0x61, (byte)0x73, (byte)0x73, (byte)0xe7, (byte)0xb1, (byte)0xbb, (byte)0xe5,
            (byte)0x88, (byte)0xab, (byte)0x3b, (byte)0x30, (byte)0x37, (byte)0x3a, (byte)0x55, (byte)0x56, (byte)0xe8, (byte)0xae, (byte)0xbe, (byte)0xe5,
            (byte)0xa4, (byte)0x87, (byte)0xe7, (byte)0xb1, (byte)0xbb, (byte)0xe5, (byte)0x88, (byte)0xab, (byte)0x3b, (byte)0x30, (byte)0x46, (byte)0x3a,
            (byte)0xe6, (byte)0x9c, (byte)0xaa, (byte)0xe7, (byte)0x9f, (byte)0xa5, (byte)0xe7, (byte)0xb1, (byte)0xbb, (byte)0xe5, (byte)0x88, (byte)0xab,
            (byte)0x3b, (byte)0xf9, (byte)0x9a, (byte)0x7e};
    // 0002 注册
    static final byte[] regByte = {(byte)0x7e, (byte)0x00, (byte)0x14, (byte)0x00, (byte)0x02, (byte)0x30, (byte)0x30, (byte)0x32, (byte)0x30, (byte)0x32,
            (byte)0x30, (byte)0x32, (byte)0x31, (byte)0x31, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x36, (byte)0x30, (byte)0xcd,
            (byte)0xfb, (byte)0x7e};
    // 0000 心跳
    static final byte[] pingPangByte = {(byte)0x7e, (byte)0x00, (byte)0x3d, (byte)0x00, (byte)0x00, (byte)0x30, (byte)0x30, (byte)0x32, (byte)0x30, (byte)0x32,
            (byte)0x30, (byte)0x32, (byte)0x31, (byte)0x31, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x36, (byte)0x30, (byte)0x00,
            (byte)0x00, (byte)0x00, (byte)0x03, (byte)0x01, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
            (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
            (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x08, (byte)0x00,
            (byte)0x00, (byte)0x08, (byte)0x00, (byte)0x00, (byte)0xac, (byte)0xe0, (byte)0x7e};
    // 0010 LOG信息
    static final byte[] logByte       = {(byte)0x7e, (byte)0x00, (byte)0x26, (byte)0x00, (byte)0x10, (byte)0x30, (byte)0x30, (byte)0x32, (byte)0x30, (byte)0x32,
            (byte)0x30, (byte)0x32, (byte)0x31, (byte)0x31, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x36, (byte)0x30, (byte)0x00,
            (byte)0x0a, (byte)0x00, (byte)0x02, (byte)0x00, (byte)0x0c, (byte)0x9a, (byte)0x19, (byte)0x66, (byte)0x43, (byte)0x39, (byte)0xb4, (byte)0xc8,
            (byte)0x3e, (byte)0x33, (byte)0x33, (byte)0x90, (byte)0x42, (byte)0xec, (byte)0x7f, (byte)0x7e};

}
